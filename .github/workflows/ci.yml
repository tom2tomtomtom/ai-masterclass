name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_masterclass_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Setup test environment
      working-directory: ./backend
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_DATABASE: ai_masterclass_test
        DB_PORT: 5432
        JWT_SECRET: test-jwt-secret-for-ci
      run: |
        cp .env.test .env
        echo "DB_PASSWORD=postgres" >> .env

    - name: Run backend tests
      working-directory: ./backend
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_DATABASE: ai_masterclass_test
        DB_PORT: 5432
        JWT_SECRET: test-jwt-secret-for-ci
      run: npm test -- --coverage --watchAll=false

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage

  lint-and-security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint on backend
      working-directory: ./backend
      run: |
        npm install --save-dev eslint
        npx eslint --init || true
        npx eslint . --ext .js || true

    - name: Run ESLint on frontend
      working-directory: ./frontend
      run: npm run lint || true

    - name: Security audit backend
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Security audit frontend
      working-directory: ./frontend
      run: npm audit --audit-level moderate

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ai_masterclass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Setup database
      working-directory: ./backend
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_DATABASE: ai_masterclass
        DB_PORT: 5432
      run: |
        npm run db:init
        npm run db:seed

    - name: Start backend server
      working-directory: ./backend
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_DATABASE: ai_masterclass
        DB_PORT: 5432
        JWT_SECRET: test-jwt-secret-for-ci
        PORT: 5000
      run: npm start &

    - name: Start frontend server
      working-directory: ./frontend
      env:
        REACT_APP_API_URL: http://localhost:5000
      run: npm start &

    - name: Wait for servers to start
      run: |
        sleep 30
        curl -f http://localhost:5000/health
        curl -f http://localhost:3000

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install

    - name: Run Playwright tests
      working-directory: ./frontend
      run: npx playwright test

    - name: Upload Playwright reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint-and-security, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Build backend
      working-directory: ./backend
      run: |
        npm ci
        # Add build steps if needed

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          frontend/build/
          backend/
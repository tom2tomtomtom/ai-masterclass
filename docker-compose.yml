version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-masterclass-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_masterclass_prod
      POSTGRES_USER: ai_user_prod
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/database.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/db/performance_indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql
    ports:
      - "5432:5432"
    networks:
      - ai-masterclass-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_user_prod -d ai_masterclass_prod"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-masterclass-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ai-masterclass-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application Server
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-masterclass-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ai_masterclass_prod
      DB_USER: ai_user_prod
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SSL: "false" # Disable SSL for internal Docker communication
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      PORT: 5000
      LOG_LEVEL: info
      ENABLE_METRICS: "true"
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    ports:
      - "5000:5000"
      - "9090:9090" # Metrics port
    networks:
      - ai-masterclass-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-masterclass-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    networks:
      - ai-masterclass-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-masterclass-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - ai-masterclass-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-masterclass-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - ai-masterclass-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ai-masterclass-network:
    driver: bridge